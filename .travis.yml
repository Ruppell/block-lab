sudo: false
dist: trusty

language: php

notifications:
  email:
    on_success: never
    on_failure: change

cache:
  directories:
    - $HOME/.composer/cache

matrix:
  include:
    - php: 7.4snapshot
      env: WP_VERSION=latest PHPUNIT_VERSION=7.5.17
    - php: 7.3
      env: WP_VERSION=latest
    - php: 7.2
      env: WP_VERSION=latest
    - php: 7.1
      env: WP_VERSION=latest
    - php: 7.0
      env: WP_VERSION=latest
    - php: 5.6
      env: WP_VERSION=latest
    - php: 5.6
      env: WP_VERSION=trunk
    - php: 5.6
      env: WP_TRAVISCI=lint
    - php: 7.3
      env: WP_TRAVISCI=test-js
    - php: 7.3
      env: WP_TRAVISCI=test-e2e

install:
  - composer install
  - nvm install --lts
  - npm install

before_script:
  - export PATH="$HOME/.composer/vendor/bin:$PATH"
  - |
    if [ -f ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ]; then
      phpenv config-rm xdebug.ini
    else
      echo "xdebug.ini does not exist"
    fi
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      if [[ -z "$PHPUNIT_VERSION" ]] ; then
        PHPUNIT_VERSION=5.7.9
      fi

      composer global require "phpunit/phpunit=$PHPUNIT_VERSION"
    fi
  - |
    if [[ "$WP_TRAVISCI" == "lint" ]] ; then
      composer global require wp-coding-standards/wpcs
      phpcs --config-set installed_paths $HOME/.composer/vendor/wp-coding-standards/wpcs
      npm run lint:js
    fi

script:
  - npm run build
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      phpunit
      WP_MULTISITE=1 phpunit
    fi
  - |
    if [[ "$WP_TRAVISCI" == "phpcs" ]] ; then
      phpcs
    fi
  - |
    if [[ "$WP_TRAVISCI" == "test-js" ]] ; then
      npm run test:js
    fi
  - |
    if [[ "$WP_TRAVISCI" == "test-e2e" ]] ; then
      # Upgrade docker-compose, copied from Gutenberg.
      sudo rm /usr/local/bin/docker-compose
      curl -sL https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 > docker-compose
      chmod +x docker-compose
      chmod -R +w /var/www/
      sudo mv docker-compose /usr/local/bin

      # Download and unpack WordPress.
      curl -sL https://github.com/WordPress/WordPress/archive/master.zip -o /tmp/wordpress-latest.zip
      unzip -q /tmp/wordpress-latest.zip -d /tmp
      mkdir -p wordpress/src
      mv /tmp/WordPress-master/* wordpress/src
      # Create the upload directory with permissions that Travis can handle.
      mkdir -p wordpress/src/wp-content/uploads
      chmod 767 wordpress/src/wp-content/uploads
      # Grab the tools we need for WordPress' local-env.
      curl -sL https://github.com/WordPress/wordpress-develop/archive/master.zip -o /tmp/wordpress-develop.zip
      unzip -q /tmp/wordpress-develop.zip -d /tmp
      mv \
        /tmp/wordpress-develop-master/tools \
        /tmp/wordpress-develop-master/tests \
        /tmp/wordpress-develop-master/.env \
        /tmp/wordpress-develop-master/docker-compose.yml \
        /tmp/wordpress-develop-master/wp-cli.yml \
        /tmp/wordpress-develop-master/*config-sample.php \
        /tmp/wordpress-develop-master/package.json wordpress
      # Install WordPress. The additional dependencies are required by the copied `wordpress-develop` tools.
      cd wordpress
      npm install dotenv wait-on
      npm run env:start
      sleep 10
      npm run env:install
      cd ..
      # Connect Gutenberg to WordPress.
      npm run env connect
      npm run test:e2e
      npm run env stop
    fi
